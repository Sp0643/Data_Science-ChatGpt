import pkg_resources
from openpyxl import Workbook

# Get a list of installed packages with their versions
installed_packages = [(pkg.key, pkg.version) for pkg in pkg_resources.working_set]

# Create a new Excel workbook
workbook = Workbook()

# Create a new sheet in the workbook
sheet = workbook.active

# Write headers to the sheet
sheet.append(['Library', 'Version'])

# Write package information to the sheet
for package, version in installed_packages:
    sheet.append([package, version])

# Save the workbook to a file
workbook.save('installed_libraries.xlsx')



Certainly! You can use the `subprocess` module to run the `pip list` command and capture its output. Then, parse the output to extract the package information and save it to an Excel file. Here's an example:

```python
import subprocess
from openpyxl import Workbook

# Run 'pip list' command and capture the output
pip_list_output = subprocess.check_output(['pip', 'list']).decode('utf-8')

# Split the output into lines and skip the header
package_lines = pip_list_output.strip().split('\n')[2:]

# Parse the package information
installed_packages = [line.split()[:2] for line in package_lines]

# Create a new Excel workbook
workbook = Workbook()

# Create a new sheet in the workbook
sheet = workbook.active

# Write headers to the sheet
sheet.append(['Library', 'Version'])

# Write package information to the sheet
for package, version in installed_packages:
    sheet.append([package, version])

# Save the workbook to a file
workbook.save('installed_libraries_from_pip_list.xlsx')
```

This code will run the `pip list` command, parse its output, and save the package information to an Excel file named `installed_libraries_from_pip_list.xlsx`.




**Minutes of Meeting**

**Date:** [Insert Date]  
**Time:** [Insert Time]  
**Attendees:** [Insert Attendees]

1. **Demo of PKT Tool:**
   - A demonstration of the PKT Tool was conducted.

2. **Questions on Access and Testing:**
   - Several questions were received regarding access for testing the PKT Tool.
   - It was discussed whom to contact in case the application breaks down.

3. **Character Size Adjustment:**
   - It was suggested that the character size should be increased to allow Admin to provide case studies in questions.

4. **User Quiz Information:**
   - A request was made to pull out user quiz information in Excel format.

5. **Embedding Excel Worksheet in PowerApps:**
   - The embedding of an Excel worksheet in PowerApps to evaluate user responses was discussed.

6. **Basic Document on App's Scope:**
   - The need for a basic document outlining the scope of the application was highlighted.

**Action Items:**

1. **Access and Testing Queries:**
   - [Responsible Person] to provide details on whom to contact for application breakdown issues.

2. **Character Size Adjustment:**
   - [Responsible Person] to adjust the character size for case studies in questions.

3. **User Quiz Information:**
   - [Responsible Person] to pull out user quiz information and format it in Excel.

4. **Embedding Excel Worksheet:**
   - [Responsible Person] to embed the Excel worksheet in PowerApps for user response evaluation.

5. **App's Scope Document:**
   - [Responsible Person] to draft and circulate a basic document on the app's scope.

**Next Meeting:**
**Date:** [Insert Next Meeting Date]  
**Time:** [Insert Next Meeting Time]

**Adjournment:**
The meeting was adjourned at [Insert Time].

---

**Prepared by:** [Your Name]  
**Date:** [Insert Date]