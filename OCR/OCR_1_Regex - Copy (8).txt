Certainly! To display the countdown in the format "minutes:seconds" in Power Apps, you can modify the Label's Text property as follows:

```plaintext
Text(RoundDown((Timer1.Duration - Timer1.Value) / 1000 / 60, 0), "[$-en]General Number") & ":" & Text(Mod(RoundDown((Timer1.Duration - Timer1.Value) / 1000, 0), 60), "[$-en]General Number")
```

This formula calculates the remaining minutes and seconds separately and concatenates them in the format "minutes:seconds". Adjust the control names based on your actual setup (e.g., replace "Timer1" with your Timer control's name).


I apologize for the confusion. Let's correct the formula for displaying the countdown in "minutes:seconds." Use the following formula for the Label's Text property:

```plaintext
Text(RoundDown(Timer1.Value / 60000, 0), "[$-en]General Number") & ":" & Text(RoundDown(Mod(Timer1.Value, 60000) / 1000, 0), "[$-en]General Number")
```

This formula calculates the remaining minutes and seconds separately and concatenates them in the format "minutes:seconds". Replace "Timer1" with the actual name of your Timer control.


Certainly! To achieve this, you'll want to filter the data based on the entered kid and display the corresponding username. Here's a basic example assuming you have a TextBox for the user to enter the kid's name and a Label to display the welcome message:

1. **Insert TextBox for Kid's name:**
   - Insert a TextBox control for the user to input the kid's name.

2. **Insert Label for Welcome message:**
   - Insert a Label control where you want to display the welcome message.

3. **Set Label's Text property:**
   - Set the `Text` property of the Label to the following formula (replace "YourDataSource" with your actual data source and "KidColumnName" and "UsernameColumnName" with the actual column names):
   ```plaintext
   "Welcome " & LookUp(YourDataSource, KidColumnName = TextInput1.Text, UsernameColumnName)
   ```
   This formula uses the `LookUp` function to find the username where the kid's name matches the input from the TextBox.

4. **Handle non-matching case:**
   - To handle the case where the kid's name doesn't match any entry, you can modify the formula to provide a default message:
   ```plaintext
   If(IsBlank(LookUp(YourDataSource, KidColumnName = TextInput1.Text, UsernameColumnName)), "Kid not found", "Welcome " & LookUp(YourDataSource, KidColumnName = TextInput1.Text, UsernameColumnName))
   ```

Remember to replace "YourDataSource," "KidColumnName," and "UsernameColumnName" with your actual data source and column names. Adjust this example based on your specific data structure and app design.



Certainly, if the correct answers are coming from an Excel file, you'll need to fetch those correct answers dynamically. Assuming you have a table named `Questions` in your Excel file with columns `Question`, `CorrectAnswer`, and `UserAnswer` in Power Apps, you can modify the formulas like this:

**MCQ (Multiple Choice Questions) Score Formula:**
```plaintext
If(
    ThisItem.UserAnswer = LookUp(Questions, Question = ThisItem.Question).CorrectAnswer,
    PointsForCorrectAnswer,
    PointsForIncorrectAnswer
)
```

**Boolean Score Formula:**
```plaintext
If(
    ThisItem.UserAnswer = LookUp(Questions, Question = ThisItem.Question).CorrectAnswer,
    PointsForCorrectAnswer,
    PointsForIncorrectAnswer
)
```

Here, `LookUp(Questions, Question = ThisItem.Question).CorrectAnswer` fetches the correct answer from the Excel table based on the current question.

Make sure to replace `Questions` with the actual name of your Excel table, and adjust field names as needed. Also, set appropriate values for `PointsForCorrectAnswer` and `PointsForIncorrectAnswer`.