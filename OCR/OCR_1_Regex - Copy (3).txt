import pandas as pd
import nltk
import string
from nltk.corpus import stopwords
nltk.download('stopwords')

# Sample DataFrame with comment data
data = {
    'original_comment': [
        "This is a sample comment with punctuation! and extra characters.",
        "Another comment; it has @special symbols and unnecessary words."
    ]
}

df = pd.DataFrame(data)

# Function to clean text
def clean_text(text):
    # Remove punctuation
    text = text.translate(str.maketrans('', '', string.punctuation))
    
    # Convert to lowercase and tokenize
    tokens = nltk.word_tokenize(text.lower())
    
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]
    
    # Join tokens back into a clean text string
    clean_text = ' '.join(tokens)
    
    return clean_text

# Apply cleaning function to DataFrame
df['clean_comment'] = df['original_comment'].apply(clean_text)

# Create columns for original and cleaned comment lengths
df['original_comment_length'] = df['original_comment'].apply(len)
df['cleaned_comment_length'] = df['clean_comment'].apply(len)

# Display the DataFrame
print(df)


import matplotlib.pyplot as plt
from gensim import corpora, models
from wordcloud import WordCloud

# Assuming you've already processed the text and created the processed_text variable

# Tokenize the processed_text
tokens = processed_text.split()  # You may need further tokenization based on your requirements

# Create a dictionary and corpus
dictionary = corpora.Dictionary([tokens])
corpus = [dictionary.doc2bow(tokens)]

# Train an LDA model
lda_model = models.LdaModel(corpus, num_topics=5, id2word=dictionary, passes=10)

# Get top words for each topic
topics_words = lda_model.show_topics(formatted=False, num_words=10)

# Generate word clouds for topics
for topic, word_freq in topics_words:
    wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(dict(word_freq))
    
    # Display the word cloud for each topic
    plt.figure(figsize=(8, 6))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.title(f"Topic {topic}")
    plt.axis('off')
    plt.show()


from gensim import corpora, models

# Assuming you've already processed the text and created the processed_text variable

# Tokenize the processed_text
tokens = processed_text.split()  # You may need further tokenization based on your requirements

# Create a dictionary and corpus
dictionary = corpora.Dictionary([tokens])
corpus = [dictionary.doc2bow(tokens)]

# Train an LDA model
lda_model = models.LdaModel(corpus, num_topics=5, id2word=dictionary, passes=10)

# Get top words for each topic
topics_words = lda_model.show_topics(formatted=False, num_words=10)

# Display top words for each topic
for topic_id, word_freq in topics_words:
    print(f"Topic {topic_id}:")
    for word, weight in word_freq:
        print(f"{word}: {weight}")
    print("\n")

