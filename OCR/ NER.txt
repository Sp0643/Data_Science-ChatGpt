import spacy

# Load the English language model in SpaCy
nlp = spacy.load("en_core_web



### Releasing the Quiz to Multiple Users

To release a quiz to multiple users, you will need to:
1. Store the quiz questions and user assignments.
2. Notify users once the quiz is released.

#### Power Fx Logic for Releasing the Quiz

Assuming you have two collections: `QuestionsCollection` for storing quiz questions and `UsersCollection` for storing user details:

1. **Admin Configuration Page:**
    - Have a button called `ReleaseQuizButton`.
    - Use the `OnSelect` property of `ReleaseQuizButton` to release the quiz to selected users.

Here’s the Power Fx logic for the `OnSelect` property:

```Power Fx
// Collect selected questions
ClearCollect(SelectedQuestions, Filter(QuestionsCollection, IsSelected = true));

// Collect selected users
ClearCollect(SelectedUsers, Filter(UsersCollection, IsSelected = true));

// Update each user's record to indicate a new quiz is available
ForAll(
    SelectedUsers,
    Patch(
        UsersCollection,
        LookUp(UsersCollection, UserID = ThisRecord.UserID),
        {
            QuizAvailable: true,
            QuizQuestions: SelectedQuestions
        }
    )
);

// Notify admin of successful release
Notify("Quiz released to selected users!", NotificationType.Success);
```

### Detailed Solution for Creating User Landing Page

1. **Create a Landing Page Screen:**
    - Name it `LandingPageScreen`.

2. **Add a Gallery to Display Notifications:**
    - Insert a gallery (`NotificationGallery`) to show available quizzes.
    - Set the `Items` property of the gallery to filter users who have quizzes available.

```Power Fx
Filter(UsersCollection, QuizAvailable = true && UserID = User().Email)
```

3. **Display Quiz Information:**
    - In the `NotificationGallery`, add a label to display the quiz notification.
    - Set the `Text` property of the label to show a message.

```Power Fx
"New Quiz Available! Click to Start."
```

4. **Add a Button to Attempt the Quiz:**
    - Insert a button inside the gallery item template (`StartQuizButton`).
    - Set the `Text` property to "Start Quiz".
    - Use the `OnSelect` property to navigate to the quiz page and pass the selected questions.

```Power Fx
Navigate(
    QuizPage,
    ScreenTransition.None,
    {
        SelectedQuizQuestions: ThisItem.QuizQuestions
    }
);
```

5. **Creating the Quiz Page:**
    - Name it `QuizPage`.
    - Add a gallery (`QuizQuestionsGallery`) to display quiz questions.
    - Set the `Items` property to the passed questions.

```Power Fx
Param("SelectedQuizQuestions")
```

6. **Quiz Submission:**
    - Add a button (`SubmitQuizButton`) on the `QuizPage`.
    - Set the `Text` property to "Submit Quiz".
    - Use the `OnSelect` property to submit the quiz and update the user's record to indicate the quiz is completed.

```Power Fx
ForAll(
    QuizQuestionsGallery.AllItems,
    // Logic to store user's answers
);

// Update user's record to indicate quiz completion
Patch(
    UsersCollection,
    LookUp(UsersCollection, UserID = User().Email),
    {
        QuizAvailable: false,
        QuizQuestions: Blank()
    }
);

// Notify user of successful submission
Notify("Quiz submitted successfully!", NotificationType.Success);

// Navigate back to the landing page
Navigate(LandingPageScreen, ScreenTransition.None);
```

### Summary

1. **Admin Configuration Page:**
    - Select questions and users.
    - Release quiz with `ReleaseQuizButton` logic.

2. **User Landing Page:**
    - Display notifications with `NotificationGallery`.
    - Allow users to start the quiz with `StartQuizButton`.

3. **Quiz Page:**
    - Display selected quiz questions with `QuizQuestionsGallery`.
    - Submit quiz with `SubmitQuizButton`.

This solution provides a structured approach to releasing quizzes and notifying users within Power Apps using Power Fx logic.



Here’s a step-by-step approach to writing the Power Fx logic for releasing a quiz to selected users and displaying notifications:

### Step 1: Define the collections
Ensure you have the collections defined in your app:
- `colUserselected`: Collection for capturing the user list.
- `colCollectedQuestion`: Collection for capturing the quiz questions.

### Step 2: Release the Quiz
Add a button named `btnReleaseQuiz` on your configuration page. Use the `OnSelect` property of the button to set the logic for releasing the quiz.

```powerfx
// Generate a unique Quiz ID
Set(varQuizID, GUID());

// Get the current date and time
Set(varCurrentDateTime, Now());

// Set the expiry date to one week from now
Set(varExpiryDate, DateAdd(varCurrentDateTime, 7, Days));

// Create a collection to store the released quiz details
ClearCollect(colReleasedQuizzes, {
    QuizID: varQuizID,
    Questions: colCollectedQuestion,
    Users: colUserselected,
    ReleaseDate: varCurrentDateTime,
    ExpiryDate: varExpiryDate
});

// Update the user notifications
ForAll(
    colUserselected,
    Collect(
        colUserNotifications,
        {
            UserID: ThisRecord.UserID,
            QuizID: varQuizID,
            NotificationText: "A new quiz has been released and is active for a week.",
            IsActive: true,
            NotificationDate: varCurrentDateTime,
            ExpiryDate: varExpiryDate
        }
    )
);

// Provide feedback to the admin
Notify("Quiz released successfully and notifications sent to users.", NotificationType.Success);
```

### Step 3: Display Notifications on User Landing Page
On the user's landing page, create a gallery to display active notifications.

1. Insert a gallery control (`galNotifications`).
2. Set the `Items` property of the gallery to filter the notifications for the logged-in user.

```powerfx
Filter(
    colUserNotifications,
    UserID = User().Email && IsActive = true && ExpiryDate >= Today()
)
```

3. Add labels or other controls inside the gallery to display the notification text and other details.

### Step 4: Handle Quiz Expiry
To automatically handle quiz expiry, you can use a timer control that checks and updates the status of quizzes and notifications periodically.

1. Insert a timer control (`timerCheckExpiry`).
2. Set the `Duration` property to a suitable interval (e.g., 86400000 for 24 hours).
3. Set the `OnTimerEnd` property to check and deactivate expired quizzes and notifications.

```powerfx
ForAll(
    Filter(colReleasedQuizzes, ExpiryDate < Now()),
    Patch(
        colReleasedQuizzes,
        ThisRecord,
        { IsActive: false }
    )
);

ForAll(
    Filter(colUserNotifications, ExpiryDate < Now()),
    Patch(
        colUserNotifications,
        ThisRecord,
        { IsActive: false }
    )
);
```

By following these steps, you can create the logic needed to release quizzes to users, display notifications, and manage the active status of quizzes and notifications in Power Apps.